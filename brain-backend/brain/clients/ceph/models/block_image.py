# Copyright (C) 2021 - 2025, Shanghai Yunsilicon Technology Co., Ltd.

# coding: utf-8

"""
    Ceph REST API

    This is the official Ceph REST API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, conlist, validator
from brain.clients.ceph.models.image_snapshot import ImageSnapshot
from brain.clients.ceph.models.pool_configuration_item import PoolConfigurationItem

class BlockImage(BaseModel):
    """
    BlockImage
    """
    size: Optional[StrictInt] = None
    obj_size: Optional[StrictInt] = None
    num_objs: Optional[StrictInt] = None
    order: Optional[StrictInt] = None
    block_name_prefix: Optional[StrictStr] = None
    mirror_mode: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    unique_id: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    image_format: Optional[StrictInt] = None
    pool_name: Optional[StrictStr] = None
    namespace: Optional[Dict[str, Any]] = None
    features: Optional[StrictInt] = None
    features_name: Optional[conlist(StrictStr)] = None
    timestamp: Optional[datetime] = None
    stripe_count: Optional[StrictInt] = None
    stripe_unit: Optional[StrictInt] = None
    data_pool: Optional[Dict[str, Any]] = None
    parent: Optional[Dict[str, Any]] = None
    snapshots: Optional[conlist(ImageSnapshot)] = None
    total_disk_usage: Optional[StrictInt] = None
    disk_usage: Optional[StrictInt] = None
    configuration: Optional[conlist(PoolConfigurationItem)] = None
    metadata: Optional[Dict[str, Dict[str, Any]]] = None
    __properties = ["size", "obj_size", "num_objs", "order", "block_name_prefix", "mirror_mode", "name", "unique_id", "id", "image_format", "pool_name", "namespace", "features", "features_name", "timestamp", "stripe_count", "stripe_unit", "data_pool", "parent", "snapshots", "total_disk_usage", "disk_usage", "configuration", "metadata"]

    @validator('features_name')
    def features_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('deep-flatten', 'exclusive-lock', 'fast-diff', 'layering', 'object-map'):
                raise ValueError("each list item must be one of ('deep-flatten', 'exclusive-lock', 'fast-diff', 'layering', 'object-map')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BlockImage:
        """Create an instance of BlockImage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in snapshots (list)
        _items = []
        if self.snapshots:
            for _item in self.snapshots:
                if _item:
                    _items.append(_item.to_dict())
            _dict['snapshots'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in configuration (list)
        _items = []
        if self.configuration:
            for _item in self.configuration:
                if _item:
                    _items.append(_item.to_dict())
            _dict['configuration'] = _items
        # set to None if namespace (nullable) is None
        # and __fields_set__ contains the field
        if self.namespace is None and "namespace" in self.__fields_set__:
            _dict['namespace'] = None

        # set to None if data_pool (nullable) is None
        # and __fields_set__ contains the field
        if self.data_pool is None and "data_pool" in self.__fields_set__:
            _dict['data_pool'] = None

        # set to None if parent (nullable) is None
        # and __fields_set__ contains the field
        if self.parent is None and "parent" in self.__fields_set__:
            _dict['parent'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BlockImage:
        """Create an instance of BlockImage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BlockImage.parse_obj(obj)

        _obj = BlockImage.parse_obj({
            "size": obj.get("size"),
            "obj_size": obj.get("obj_size"),
            "num_objs": obj.get("num_objs"),
            "order": obj.get("order"),
            "block_name_prefix": obj.get("block_name_prefix"),
            "mirror_mode": obj.get("mirror_mode"),
            "name": obj.get("name"),
            "unique_id": obj.get("unique_id"),
            "id": obj.get("id"),
            "image_format": obj.get("image_format"),
            "pool_name": obj.get("pool_name"),
            "namespace": obj.get("namespace"),
            "features": obj.get("features"),
            "features_name": obj.get("features_name"),
            "timestamp": obj.get("timestamp"),
            "stripe_count": obj.get("stripe_count"),
            "stripe_unit": obj.get("stripe_unit"),
            "data_pool": obj.get("data_pool"),
            "parent": obj.get("parent"),
            "snapshots": [ImageSnapshot.from_dict(_item) for _item in obj.get("snapshots")] if obj.get("snapshots") is not None else None,
            "total_disk_usage": obj.get("total_disk_usage"),
            "disk_usage": obj.get("disk_usage"),
            "configuration": [PoolConfigurationItem.from_dict(_item) for _item in obj.get("configuration")] if obj.get("configuration") is not None else None,
            "metadata": obj.get("metadata")
        })
        return _obj


