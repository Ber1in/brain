# Copyright (C) 2021 - 2025, Shanghai Yunsilicon Technology Co., Ltd.

# coding: utf-8

"""
    Ceph REST API

    This is the official Ceph REST API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from brain.clients.ceph.models.hit_set_params import HitSetParams
from brain.clients.ceph.models.last_pg_merge_meta import LastPGMergeMeta
from brain.clients.ceph.models.pool_configuration_item import PoolConfigurationItem
from brain.clients.ceph.models.read_balance import ReadBalance

class Pool(BaseModel):
    """
    Pool
    """
    pool: Optional[StrictInt] = None
    pool_name: Optional[StrictStr] = None
    flags: Optional[StrictInt] = None
    flags_names: Optional[StrictStr] = Field(None, description="Comma-separated list of pool flags (e.g., \"hashpspool,selfmanaged_snaps\")")
    type: Optional[StrictStr] = None
    size: Optional[StrictInt] = None
    min_size: Optional[StrictInt] = None
    crush_rule: Optional[StrictStr] = None
    peering_crush_bucket_count: Optional[StrictInt] = None
    peering_crush_bucket_target: Optional[StrictInt] = None
    peering_crush_bucket_barrier: Optional[StrictInt] = None
    peering_crush_bucket_mandatory_member: Optional[StrictInt] = None
    object_hash: Optional[StrictInt] = None
    pg_autoscale_mode: Optional[StrictStr] = None
    pg_num: Optional[StrictInt] = None
    pg_placement_num: Optional[StrictInt] = None
    pg_placement_num_target: Optional[StrictInt] = None
    pg_num_target: Optional[StrictInt] = None
    pg_num_pending: Optional[StrictInt] = None
    last_pg_merge_meta: Optional[LastPGMergeMeta] = None
    auid: Optional[StrictInt] = None
    snap_mode: Optional[StrictStr] = None
    snap_seq: Optional[StrictInt] = None
    snap_epoch: Optional[StrictInt] = None
    pool_snaps: Optional[conlist(StrictStr)] = None
    quota_max_bytes: Optional[StrictInt] = None
    quota_max_objects: Optional[StrictInt] = None
    tiers: Optional[conlist(StrictStr)] = None
    tier_of: Optional[StrictInt] = None
    read_tier: Optional[StrictInt] = None
    write_tier: Optional[StrictInt] = None
    cache_mode: Optional[StrictStr] = None
    target_max_bytes: Optional[StrictInt] = None
    target_max_objects: Optional[StrictInt] = None
    cache_target_dirty_ratio_micro: Optional[StrictInt] = None
    cache_target_dirty_high_ratio_micro: Optional[StrictInt] = None
    cache_target_full_ratio_micro: Optional[StrictInt] = None
    cache_min_flush_age: Optional[StrictInt] = None
    cache_min_evict_age: Optional[StrictInt] = None
    erasure_code_profile: Optional[StrictStr] = None
    hit_set_params: Optional[HitSetParams] = None
    hit_set_period: Optional[StrictInt] = None
    hit_set_count: Optional[StrictInt] = None
    use_gmt_hitset: Optional[StrictBool] = None
    min_read_recency_for_promote: Optional[StrictInt] = None
    min_write_recency_for_promote: Optional[StrictInt] = None
    hit_set_grade_decay_rate: Optional[StrictInt] = None
    hit_set_search_last_n: Optional[StrictInt] = None
    grade_table: Optional[conlist(Dict[str, Any])] = None
    stripe_width: Optional[StrictInt] = None
    expected_num_objects: Optional[StrictInt] = None
    fast_read: Optional[StrictBool] = None
    options: Optional[Dict[str, Dict[str, Any]]] = None
    application_metadata: Optional[conlist(StrictStr)] = None
    read_balance: Optional[ReadBalance] = None
    create_time: Optional[StrictStr] = None
    last_change: Optional[StrictStr] = None
    last_force_op_resend: Optional[StrictStr] = None
    last_force_op_resend_prenautilus: Optional[StrictStr] = None
    last_force_op_resend_preluminous: Optional[StrictStr] = None
    removed_snaps: Optional[StrictStr] = None
    configuration: Optional[conlist(PoolConfigurationItem)] = None
    __properties = ["pool", "pool_name", "flags", "flags_names", "type", "size", "min_size", "crush_rule", "peering_crush_bucket_count", "peering_crush_bucket_target", "peering_crush_bucket_barrier", "peering_crush_bucket_mandatory_member", "object_hash", "pg_autoscale_mode", "pg_num", "pg_placement_num", "pg_placement_num_target", "pg_num_target", "pg_num_pending", "last_pg_merge_meta", "auid", "snap_mode", "snap_seq", "snap_epoch", "pool_snaps", "quota_max_bytes", "quota_max_objects", "tiers", "tier_of", "read_tier", "write_tier", "cache_mode", "target_max_bytes", "target_max_objects", "cache_target_dirty_ratio_micro", "cache_target_dirty_high_ratio_micro", "cache_target_full_ratio_micro", "cache_min_flush_age", "cache_min_evict_age", "erasure_code_profile", "hit_set_params", "hit_set_period", "hit_set_count", "use_gmt_hitset", "min_read_recency_for_promote", "min_write_recency_for_promote", "hit_set_grade_decay_rate", "hit_set_search_last_n", "grade_table", "stripe_width", "expected_num_objects", "fast_read", "options", "application_metadata", "read_balance", "create_time", "last_change", "last_force_op_resend", "last_force_op_resend_prenautilus", "last_force_op_resend_preluminous", "removed_snaps", "configuration"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Pool:
        """Create an instance of Pool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of last_pg_merge_meta
        if self.last_pg_merge_meta:
            _dict['last_pg_merge_meta'] = self.last_pg_merge_meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hit_set_params
        if self.hit_set_params:
            _dict['hit_set_params'] = self.hit_set_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of read_balance
        if self.read_balance:
            _dict['read_balance'] = self.read_balance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in configuration (list)
        _items = []
        if self.configuration:
            for _item in self.configuration:
                if _item:
                    _items.append(_item.to_dict())
            _dict['configuration'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Pool:
        """Create an instance of Pool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Pool.parse_obj(obj)

        _obj = Pool.parse_obj({
            "pool": obj.get("pool"),
            "pool_name": obj.get("pool_name"),
            "flags": obj.get("flags"),
            "flags_names": obj.get("flags_names"),
            "type": obj.get("type"),
            "size": obj.get("size"),
            "min_size": obj.get("min_size"),
            "crush_rule": obj.get("crush_rule"),
            "peering_crush_bucket_count": obj.get("peering_crush_bucket_count"),
            "peering_crush_bucket_target": obj.get("peering_crush_bucket_target"),
            "peering_crush_bucket_barrier": obj.get("peering_crush_bucket_barrier"),
            "peering_crush_bucket_mandatory_member": obj.get("peering_crush_bucket_mandatory_member"),
            "object_hash": obj.get("object_hash"),
            "pg_autoscale_mode": obj.get("pg_autoscale_mode"),
            "pg_num": obj.get("pg_num"),
            "pg_placement_num": obj.get("pg_placement_num"),
            "pg_placement_num_target": obj.get("pg_placement_num_target"),
            "pg_num_target": obj.get("pg_num_target"),
            "pg_num_pending": obj.get("pg_num_pending"),
            "last_pg_merge_meta": LastPGMergeMeta.from_dict(obj.get("last_pg_merge_meta")) if obj.get("last_pg_merge_meta") is not None else None,
            "auid": obj.get("auid"),
            "snap_mode": obj.get("snap_mode"),
            "snap_seq": obj.get("snap_seq"),
            "snap_epoch": obj.get("snap_epoch"),
            "pool_snaps": obj.get("pool_snaps"),
            "quota_max_bytes": obj.get("quota_max_bytes"),
            "quota_max_objects": obj.get("quota_max_objects"),
            "tiers": obj.get("tiers"),
            "tier_of": obj.get("tier_of"),
            "read_tier": obj.get("read_tier"),
            "write_tier": obj.get("write_tier"),
            "cache_mode": obj.get("cache_mode"),
            "target_max_bytes": obj.get("target_max_bytes"),
            "target_max_objects": obj.get("target_max_objects"),
            "cache_target_dirty_ratio_micro": obj.get("cache_target_dirty_ratio_micro"),
            "cache_target_dirty_high_ratio_micro": obj.get("cache_target_dirty_high_ratio_micro"),
            "cache_target_full_ratio_micro": obj.get("cache_target_full_ratio_micro"),
            "cache_min_flush_age": obj.get("cache_min_flush_age"),
            "cache_min_evict_age": obj.get("cache_min_evict_age"),
            "erasure_code_profile": obj.get("erasure_code_profile"),
            "hit_set_params": HitSetParams.from_dict(obj.get("hit_set_params")) if obj.get("hit_set_params") is not None else None,
            "hit_set_period": obj.get("hit_set_period"),
            "hit_set_count": obj.get("hit_set_count"),
            "use_gmt_hitset": obj.get("use_gmt_hitset"),
            "min_read_recency_for_promote": obj.get("min_read_recency_for_promote"),
            "min_write_recency_for_promote": obj.get("min_write_recency_for_promote"),
            "hit_set_grade_decay_rate": obj.get("hit_set_grade_decay_rate"),
            "hit_set_search_last_n": obj.get("hit_set_search_last_n"),
            "grade_table": obj.get("grade_table"),
            "stripe_width": obj.get("stripe_width"),
            "expected_num_objects": obj.get("expected_num_objects"),
            "fast_read": obj.get("fast_read"),
            "options": obj.get("options"),
            "application_metadata": obj.get("application_metadata"),
            "read_balance": ReadBalance.from_dict(obj.get("read_balance")) if obj.get("read_balance") is not None else None,
            "create_time": obj.get("create_time"),
            "last_change": obj.get("last_change"),
            "last_force_op_resend": obj.get("last_force_op_resend"),
            "last_force_op_resend_prenautilus": obj.get("last_force_op_resend_prenautilus"),
            "last_force_op_resend_preluminous": obj.get("last_force_op_resend_preluminous"),
            "removed_snaps": obj.get("removed_snaps"),
            "configuration": [PoolConfigurationItem.from_dict(_item) for _item in obj.get("configuration")] if obj.get("configuration") is not None else None
        })
        return _obj


