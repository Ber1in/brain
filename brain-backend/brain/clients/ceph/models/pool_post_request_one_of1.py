# Copyright (C) 2021 - 2025, Shanghai Yunsilicon Technology Co., Ltd.

# coding: utf-8

"""
    Ceph REST API

    This is the official Ceph REST API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

class PoolPostRequestOneOf1(BaseModel):
    """
    PoolPostRequestOneOf1
    """
    pool_type: StrictStr = Field(...)
    rule_name: StrictStr = Field(...)
    size: StrictInt = Field(...)
    __properties = ["pool_type", "rule_name", "size"]

    @validator('pool_type')
    def pool_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('replicated'):
            raise ValueError("must be one of enum values ('replicated')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PoolPostRequestOneOf1:
        """Create an instance of PoolPostRequestOneOf1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PoolPostRequestOneOf1:
        """Create an instance of PoolPostRequestOneOf1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PoolPostRequestOneOf1.parse_obj(obj)

        _obj = PoolPostRequestOneOf1.parse_obj({
            "pool_type": obj.get("pool_type") if obj.get("pool_type") is not None else 'replicated',
            "rule_name": obj.get("rule_name") if obj.get("rule_name") is not None else 'replicated_rule',
            "size": obj.get("size") if obj.get("size") is not None else 2
        })
        return _obj


