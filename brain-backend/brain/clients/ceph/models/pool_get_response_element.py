# Copyright (C) 2021 - 2025, Shanghai Yunsilicon Technology Co., Ltd.

# coding: utf-8

"""
    Ceph REST API

    This is the official Ceph REST API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from brain.clients.ceph.models.hit_set_params import HitSetParams
from brain.clients.ceph.models.last_pg_merge_meta import LastPGMergeMeta
from brain.clients.ceph.models.pool_get_response_element_options import PoolGetResponseElementOptions
from brain.clients.ceph.models.pool_stats import PoolStats
from brain.clients.ceph.models.read_balance import ReadBalance

class PoolGetResponseElement(BaseModel):
    """
    PoolGetResponseElement
    """
    pool: StrictInt = Field(...)
    pool_name: StrictStr = Field(...)
    flags: StrictInt = Field(...)
    flags_names: StrictStr = Field(...)
    type: StrictStr = Field(...)
    size: StrictInt = Field(...)
    min_size: StrictInt = Field(...)
    crush_rule: StrictStr = Field(...)
    peering_crush_bucket_count: Optional[StrictInt] = None
    peering_crush_bucket_target: Optional[StrictInt] = None
    peering_crush_bucket_barrier: Optional[StrictInt] = None
    peering_crush_bucket_mandatory_member: Optional[StrictInt] = None
    object_hash: StrictInt = Field(...)
    pg_autoscale_mode: StrictStr = Field(...)
    pg_num: StrictInt = Field(...)
    pg_placement_num: StrictInt = Field(...)
    pg_placement_num_target: StrictInt = Field(...)
    pg_num_target: StrictInt = Field(...)
    pg_num_pending: StrictInt = Field(...)
    last_pg_merge_meta: LastPGMergeMeta = Field(...)
    auid: StrictInt = Field(...)
    snap_mode: StrictStr = Field(...)
    snap_seq: StrictInt = Field(...)
    snap_epoch: StrictInt = Field(...)
    pool_snaps: conlist(Any) = Field(...)
    quota_max_bytes: StrictInt = Field(...)
    quota_max_objects: StrictInt = Field(...)
    tiers: conlist(Any) = Field(...)
    tier_of: StrictInt = Field(...)
    read_tier: StrictInt = Field(...)
    write_tier: StrictInt = Field(...)
    cache_mode: StrictStr = Field(...)
    target_max_bytes: StrictInt = Field(...)
    target_max_objects: StrictInt = Field(...)
    cache_target_dirty_ratio_micro: StrictInt = Field(...)
    cache_target_dirty_high_ratio_micro: StrictInt = Field(...)
    cache_target_full_ratio_micro: StrictInt = Field(...)
    cache_min_flush_age: StrictInt = Field(...)
    cache_min_evict_age: StrictInt = Field(...)
    erasure_code_profile: StrictStr = Field(...)
    hit_set_params: HitSetParams = Field(...)
    hit_set_period: StrictInt = Field(...)
    hit_set_count: StrictInt = Field(...)
    use_gmt_hitset: StrictBool = Field(...)
    min_read_recency_for_promote: StrictInt = Field(...)
    min_write_recency_for_promote: StrictInt = Field(...)
    hit_set_grade_decay_rate: StrictInt = Field(...)
    hit_set_search_last_n: StrictInt = Field(...)
    grade_table: conlist(Any) = Field(...)
    stripe_width: StrictInt = Field(...)
    expected_num_objects: StrictInt = Field(...)
    fast_read: StrictBool = Field(...)
    options: PoolGetResponseElementOptions = Field(...)
    application_metadata: conlist(StrictStr) = Field(...)
    read_balance: Optional[ReadBalance] = None
    create_time: StrictStr = Field(...)
    last_change: StrictStr = Field(...)
    last_force_op_resend: StrictStr = Field(...)
    last_force_op_resend_prenautilus: StrictStr = Field(...)
    last_force_op_resend_preluminous: StrictStr = Field(...)
    removed_snaps: StrictStr = Field(...)
    pg_status: Optional[Dict[str, StrictInt]] = None
    stats: Optional[PoolStats] = None
    __properties = ["pool", "pool_name", "flags", "flags_names", "type", "size", "min_size", "crush_rule", "peering_crush_bucket_count", "peering_crush_bucket_target", "peering_crush_bucket_barrier", "peering_crush_bucket_mandatory_member", "object_hash", "pg_autoscale_mode", "pg_num", "pg_placement_num", "pg_placement_num_target", "pg_num_target", "pg_num_pending", "last_pg_merge_meta", "auid", "snap_mode", "snap_seq", "snap_epoch", "pool_snaps", "quota_max_bytes", "quota_max_objects", "tiers", "tier_of", "read_tier", "write_tier", "cache_mode", "target_max_bytes", "target_max_objects", "cache_target_dirty_ratio_micro", "cache_target_dirty_high_ratio_micro", "cache_target_full_ratio_micro", "cache_min_flush_age", "cache_min_evict_age", "erasure_code_profile", "hit_set_params", "hit_set_period", "hit_set_count", "use_gmt_hitset", "min_read_recency_for_promote", "min_write_recency_for_promote", "hit_set_grade_decay_rate", "hit_set_search_last_n", "grade_table", "stripe_width", "expected_num_objects", "fast_read", "options", "application_metadata", "read_balance", "create_time", "last_change", "last_force_op_resend", "last_force_op_resend_prenautilus", "last_force_op_resend_preluminous", "removed_snaps", "pg_status", "stats"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PoolGetResponseElement:
        """Create an instance of PoolGetResponseElement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of last_pg_merge_meta
        if self.last_pg_merge_meta:
            _dict['last_pg_merge_meta'] = self.last_pg_merge_meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hit_set_params
        if self.hit_set_params:
            _dict['hit_set_params'] = self.hit_set_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of read_balance
        if self.read_balance:
            _dict['read_balance'] = self.read_balance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PoolGetResponseElement:
        """Create an instance of PoolGetResponseElement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PoolGetResponseElement.parse_obj(obj)

        _obj = PoolGetResponseElement.parse_obj({
            "pool": obj.get("pool"),
            "pool_name": obj.get("pool_name"),
            "flags": obj.get("flags"),
            "flags_names": obj.get("flags_names"),
            "type": obj.get("type"),
            "size": obj.get("size"),
            "min_size": obj.get("min_size"),
            "crush_rule": obj.get("crush_rule"),
            "peering_crush_bucket_count": obj.get("peering_crush_bucket_count"),
            "peering_crush_bucket_target": obj.get("peering_crush_bucket_target"),
            "peering_crush_bucket_barrier": obj.get("peering_crush_bucket_barrier"),
            "peering_crush_bucket_mandatory_member": obj.get("peering_crush_bucket_mandatory_member"),
            "object_hash": obj.get("object_hash"),
            "pg_autoscale_mode": obj.get("pg_autoscale_mode"),
            "pg_num": obj.get("pg_num"),
            "pg_placement_num": obj.get("pg_placement_num"),
            "pg_placement_num_target": obj.get("pg_placement_num_target"),
            "pg_num_target": obj.get("pg_num_target"),
            "pg_num_pending": obj.get("pg_num_pending"),
            "last_pg_merge_meta": LastPGMergeMeta.from_dict(obj.get("last_pg_merge_meta")) if obj.get("last_pg_merge_meta") is not None else None,
            "auid": obj.get("auid"),
            "snap_mode": obj.get("snap_mode"),
            "snap_seq": obj.get("snap_seq"),
            "snap_epoch": obj.get("snap_epoch"),
            "pool_snaps": obj.get("pool_snaps"),
            "quota_max_bytes": obj.get("quota_max_bytes"),
            "quota_max_objects": obj.get("quota_max_objects"),
            "tiers": obj.get("tiers"),
            "tier_of": obj.get("tier_of"),
            "read_tier": obj.get("read_tier"),
            "write_tier": obj.get("write_tier"),
            "cache_mode": obj.get("cache_mode"),
            "target_max_bytes": obj.get("target_max_bytes"),
            "target_max_objects": obj.get("target_max_objects"),
            "cache_target_dirty_ratio_micro": obj.get("cache_target_dirty_ratio_micro"),
            "cache_target_dirty_high_ratio_micro": obj.get("cache_target_dirty_high_ratio_micro"),
            "cache_target_full_ratio_micro": obj.get("cache_target_full_ratio_micro"),
            "cache_min_flush_age": obj.get("cache_min_flush_age"),
            "cache_min_evict_age": obj.get("cache_min_evict_age"),
            "erasure_code_profile": obj.get("erasure_code_profile"),
            "hit_set_params": HitSetParams.from_dict(obj.get("hit_set_params")) if obj.get("hit_set_params") is not None else None,
            "hit_set_period": obj.get("hit_set_period"),
            "hit_set_count": obj.get("hit_set_count"),
            "use_gmt_hitset": obj.get("use_gmt_hitset"),
            "min_read_recency_for_promote": obj.get("min_read_recency_for_promote"),
            "min_write_recency_for_promote": obj.get("min_write_recency_for_promote"),
            "hit_set_grade_decay_rate": obj.get("hit_set_grade_decay_rate"),
            "hit_set_search_last_n": obj.get("hit_set_search_last_n"),
            "grade_table": obj.get("grade_table"),
            "stripe_width": obj.get("stripe_width"),
            "expected_num_objects": obj.get("expected_num_objects"),
            "fast_read": obj.get("fast_read"),
            "options": PoolGetResponseElementOptions.from_dict(obj.get("options")) if obj.get("options") is not None else None,
            "application_metadata": obj.get("application_metadata"),
            "read_balance": ReadBalance.from_dict(obj.get("read_balance")) if obj.get("read_balance") is not None else None,
            "create_time": obj.get("create_time"),
            "last_change": obj.get("last_change"),
            "last_force_op_resend": obj.get("last_force_op_resend"),
            "last_force_op_resend_prenautilus": obj.get("last_force_op_resend_prenautilus"),
            "last_force_op_resend_preluminous": obj.get("last_force_op_resend_preluminous"),
            "removed_snaps": obj.get("removed_snaps"),
            "pg_status": obj.get("pg_status"),
            "stats": PoolStats.from_dict(obj.get("stats")) if obj.get("stats") is not None else None
        })
        return _obj


