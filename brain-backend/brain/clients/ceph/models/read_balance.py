# Copyright (C) 2021 - 2025, Shanghai Yunsilicon Technology Co., Ltd.

# coding: utf-8

"""
    Ceph REST API

    This is the official Ceph REST API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt

class ReadBalance(BaseModel):
    """
    ReadBalance
    """
    score_acting: Optional[Union[StrictFloat, StrictInt]] = None
    score_stable: Optional[Union[StrictFloat, StrictInt]] = None
    optimal_score: Optional[Union[StrictFloat, StrictInt]] = None
    raw_score_acting: Optional[Union[StrictFloat, StrictInt]] = None
    raw_score_stable: Optional[Union[StrictFloat, StrictInt]] = None
    primary_affinity_weighted: Optional[Union[StrictFloat, StrictInt]] = None
    average_primary_affinity: Optional[Union[StrictFloat, StrictInt]] = None
    average_primary_affinity_weighted: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["score_acting", "score_stable", "optimal_score", "raw_score_acting", "raw_score_stable", "primary_affinity_weighted", "average_primary_affinity", "average_primary_affinity_weighted"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReadBalance:
        """Create an instance of ReadBalance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReadBalance:
        """Create an instance of ReadBalance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ReadBalance.parse_obj(obj)

        _obj = ReadBalance.parse_obj({
            "score_acting": obj.get("score_acting"),
            "score_stable": obj.get("score_stable"),
            "optimal_score": obj.get("optimal_score"),
            "raw_score_acting": obj.get("raw_score_acting"),
            "raw_score_stable": obj.get("raw_score_stable"),
            "primary_affinity_weighted": obj.get("primary_affinity_weighted"),
            "average_primary_affinity": obj.get("average_primary_affinity"),
            "average_primary_affinity_weighted": obj.get("average_primary_affinity_weighted")
        })
        return _obj


