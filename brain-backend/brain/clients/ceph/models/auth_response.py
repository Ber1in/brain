# Copyright (C) 2021 - 2025, Shanghai Yunsilicon Technology Co., Ltd.

# coding: utf-8

"""
    Ceph REST API

    This is the official Ceph REST API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

class AuthResponse(BaseModel):
    """
    AuthResponse
    """
    token: StrictStr = Field(..., description="Authentication Token")
    username: StrictStr = Field(..., description="Username")
    permissions: Dict[str, conlist(StrictStr)] = Field(..., description="User permissions")
    pwd_expiration_date: Optional[StrictInt] = Field(None, alias="pwdExpirationDate", description="Password expiration date")
    sso: StrictBool = Field(..., description="Single Sign-On")
    pwd_update_required: StrictBool = Field(..., alias="pwdUpdateRequired", description="Password update required")
    __properties = ["token", "username", "permissions", "pwdExpirationDate", "sso", "pwdUpdateRequired"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuthResponse:
        """Create an instance of AuthResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in permissions (dict of array)
        _field_dict_of_array = {}
        if self.permissions:
            for _key in self.permissions:
                if self.permissions[_key]:
                    _field_dict_of_array[_key] = [
                        _item.to_dict() for _item in self.permissions[_key]
                    ]
            _dict['permissions'] = _field_dict_of_array
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuthResponse:
        """Create an instance of AuthResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AuthResponse.parse_obj(obj)

        _obj = AuthResponse.parse_obj({
            "token": obj.get("token"),
            "username": obj.get("username"),
            "permissions": obj.get("permissions"),
            "pwd_expiration_date": obj.get("pwdExpirationDate"),
            "sso": obj.get("sso"),
            "pwd_update_required": obj.get("pwdUpdateRequired")
        })
        return _obj


