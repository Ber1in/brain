# Copyright (C) 2021 - 2025, Shanghai Yunsilicon Technology Co., Ltd.

# coding: utf-8

"""
    Ceph REST API

    This is the official Ceph REST API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, validator

class CompressionInner(BaseModel):
    """
    CompressionInner
    """
    compression_mode: Optional[StrictStr] = None
    compression_algorithm: Optional[StrictStr] = None
    compression_min_blob_size: Optional[StrictInt] = 0
    compression_max_blob_size: Optional[StrictInt] = 0
    compression_required_ratio: Optional[Union[StrictFloat, StrictInt]] = 0
    __properties = ["compression_mode", "compression_algorithm", "compression_min_blob_size", "compression_max_blob_size", "compression_required_ratio"]

    @validator('compression_mode')
    def compression_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('aggressive', 'passive', 'force', 'unset'):
            raise ValueError("must be one of enum values ('aggressive', 'passive', 'force', 'unset')")
        return value

    @validator('compression_algorithm')
    def compression_algorithm_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('zlib', 'snappy', 'lz4', 'zstd'):
            raise ValueError("must be one of enum values ('zlib', 'snappy', 'lz4', 'zstd')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CompressionInner:
        """Create an instance of CompressionInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CompressionInner:
        """Create an instance of CompressionInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CompressionInner.parse_obj(obj)

        _obj = CompressionInner.parse_obj({
            "compression_mode": obj.get("compression_mode"),
            "compression_algorithm": obj.get("compression_algorithm"),
            "compression_min_blob_size": obj.get("compression_min_blob_size") if obj.get("compression_min_blob_size") is not None else 0,
            "compression_max_blob_size": obj.get("compression_max_blob_size") if obj.get("compression_max_blob_size") is not None else 0,
            "compression_required_ratio": obj.get("compression_required_ratio") if obj.get("compression_required_ratio") is not None else 0
        })
        return _obj


