# Copyright (C) 2021 - 2025, Shanghai Yunsilicon Technology Co., Ltd.

# coding: utf-8

"""
    Dpu Agent API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from pydantic import StrictStr

from brain.clients.dpuagent.models.base_response_body import BaseResponseBody
from brain.clients.dpuagent.models.dscp2_prio_request import Dscp2PrioRequest
from brain.clients.dpuagent.models.dscp_request import DscpRequest
from brain.clients.dpuagent.models.nics_info_response import NicsInfoResponse
from brain.clients.dpuagent.models.pcp_request import PcpRequest
from brain.clients.dpuagent.models.pfc_request import PfcRequest
from brain.clients.dpuagent.models.qos_info import QosInfo
from brain.clients.dpuagent.models.trust_request import TrustRequest

from brain.clients.dpuagent.api_client import ApiClient
from brain.clients.dpuagent.api_response import ApiResponse
from brain.clients.dpuagent.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class RdmaApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def configure_cma_dscp_dpu_agent_v1_rdma_qos_bdf_cma_dscp_post(self, bdf : StrictStr, dscp_request : DscpRequest, **kwargs) -> BaseResponseBody:  # noqa: E501
        """Configure Cma Dscp  # noqa: E501

        Configure the CMA DSCP value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configure_cma_dscp_dpu_agent_v1_rdma_qos_bdf_cma_dscp_post(bdf, dscp_request, async_req=True)
        >>> result = thread.get()

        :param bdf: (required)
        :type bdf: str
        :param dscp_request: (required)
        :type dscp_request: DscpRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BaseResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the configure_cma_dscp_dpu_agent_v1_rdma_qos_bdf_cma_dscp_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.configure_cma_dscp_dpu_agent_v1_rdma_qos_bdf_cma_dscp_post_with_http_info(bdf, dscp_request, **kwargs)  # noqa: E501

    @validate_arguments
    def configure_cma_dscp_dpu_agent_v1_rdma_qos_bdf_cma_dscp_post_with_http_info(self, bdf : StrictStr, dscp_request : DscpRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Configure Cma Dscp  # noqa: E501

        Configure the CMA DSCP value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configure_cma_dscp_dpu_agent_v1_rdma_qos_bdf_cma_dscp_post_with_http_info(bdf, dscp_request, async_req=True)
        >>> result = thread.get()

        :param bdf: (required)
        :type bdf: str
        :param dscp_request: (required)
        :type dscp_request: DscpRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BaseResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'bdf',
            'dscp_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configure_cma_dscp_dpu_agent_v1_rdma_qos_bdf_cma_dscp_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['bdf']:
            _path_params['bdf'] = _params['bdf']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['dscp_request'] is not None:
            _body_params = _params['dscp_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "BaseResponseBody",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/dpu_agent/v1/rdma/qos/{bdf}/cma_dscp', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def configure_cma_pcp_dpu_agent_v1_rdma_qos_bdf_cma_pcp_post(self, bdf : StrictStr, pcp_request : PcpRequest, **kwargs) -> BaseResponseBody:  # noqa: E501
        """Configure Cma Pcp  # noqa: E501

        Configure the CMA PCP value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configure_cma_pcp_dpu_agent_v1_rdma_qos_bdf_cma_pcp_post(bdf, pcp_request, async_req=True)
        >>> result = thread.get()

        :param bdf: (required)
        :type bdf: str
        :param pcp_request: (required)
        :type pcp_request: PcpRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BaseResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the configure_cma_pcp_dpu_agent_v1_rdma_qos_bdf_cma_pcp_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.configure_cma_pcp_dpu_agent_v1_rdma_qos_bdf_cma_pcp_post_with_http_info(bdf, pcp_request, **kwargs)  # noqa: E501

    @validate_arguments
    def configure_cma_pcp_dpu_agent_v1_rdma_qos_bdf_cma_pcp_post_with_http_info(self, bdf : StrictStr, pcp_request : PcpRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Configure Cma Pcp  # noqa: E501

        Configure the CMA PCP value.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configure_cma_pcp_dpu_agent_v1_rdma_qos_bdf_cma_pcp_post_with_http_info(bdf, pcp_request, async_req=True)
        >>> result = thread.get()

        :param bdf: (required)
        :type bdf: str
        :param pcp_request: (required)
        :type pcp_request: PcpRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BaseResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'bdf',
            'pcp_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configure_cma_pcp_dpu_agent_v1_rdma_qos_bdf_cma_pcp_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['bdf']:
            _path_params['bdf'] = _params['bdf']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['pcp_request'] is not None:
            _body_params = _params['pcp_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "BaseResponseBody",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/dpu_agent/v1/rdma/qos/{bdf}/cma_pcp', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def configure_device_dscp2prio_dpu_agent_v1_rdma_qos_bdf_dscp2prio_post(self, bdf : StrictStr, dscp2_prio_request : Dscp2PrioRequest, **kwargs) -> BaseResponseBody:  # noqa: E501
        """Configure Device Dscp2Prio  # noqa: E501

        Set/unset a (dscp,prio) mapping.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configure_device_dscp2prio_dpu_agent_v1_rdma_qos_bdf_dscp2prio_post(bdf, dscp2_prio_request, async_req=True)
        >>> result = thread.get()

        :param bdf: (required)
        :type bdf: str
        :param dscp2_prio_request: (required)
        :type dscp2_prio_request: Dscp2PrioRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BaseResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the configure_device_dscp2prio_dpu_agent_v1_rdma_qos_bdf_dscp2prio_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.configure_device_dscp2prio_dpu_agent_v1_rdma_qos_bdf_dscp2prio_post_with_http_info(bdf, dscp2_prio_request, **kwargs)  # noqa: E501

    @validate_arguments
    def configure_device_dscp2prio_dpu_agent_v1_rdma_qos_bdf_dscp2prio_post_with_http_info(self, bdf : StrictStr, dscp2_prio_request : Dscp2PrioRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Configure Device Dscp2Prio  # noqa: E501

        Set/unset a (dscp,prio) mapping.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configure_device_dscp2prio_dpu_agent_v1_rdma_qos_bdf_dscp2prio_post_with_http_info(bdf, dscp2_prio_request, async_req=True)
        >>> result = thread.get()

        :param bdf: (required)
        :type bdf: str
        :param dscp2_prio_request: (required)
        :type dscp2_prio_request: Dscp2PrioRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BaseResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'bdf',
            'dscp2_prio_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configure_device_dscp2prio_dpu_agent_v1_rdma_qos_bdf_dscp2prio_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['bdf']:
            _path_params['bdf'] = _params['bdf']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['dscp2_prio_request'] is not None:
            _body_params = _params['dscp2_prio_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "BaseResponseBody",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/dpu_agent/v1/rdma/qos/{bdf}/dscp2prio', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def configure_device_pfc_dpu_agent_v1_rdma_qos_bdf_pfc_post(self, bdf : StrictStr, pfc_request : PfcRequest, **kwargs) -> BaseResponseBody:  # noqa: E501
        """Configure Device Pfc  # noqa: E501

        Configure the PFC for the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configure_device_pfc_dpu_agent_v1_rdma_qos_bdf_pfc_post(bdf, pfc_request, async_req=True)
        >>> result = thread.get()

        :param bdf: (required)
        :type bdf: str
        :param pfc_request: (required)
        :type pfc_request: PfcRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BaseResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the configure_device_pfc_dpu_agent_v1_rdma_qos_bdf_pfc_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.configure_device_pfc_dpu_agent_v1_rdma_qos_bdf_pfc_post_with_http_info(bdf, pfc_request, **kwargs)  # noqa: E501

    @validate_arguments
    def configure_device_pfc_dpu_agent_v1_rdma_qos_bdf_pfc_post_with_http_info(self, bdf : StrictStr, pfc_request : PfcRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Configure Device Pfc  # noqa: E501

        Configure the PFC for the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configure_device_pfc_dpu_agent_v1_rdma_qos_bdf_pfc_post_with_http_info(bdf, pfc_request, async_req=True)
        >>> result = thread.get()

        :param bdf: (required)
        :type bdf: str
        :param pfc_request: (required)
        :type pfc_request: PfcRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BaseResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'bdf',
            'pfc_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configure_device_pfc_dpu_agent_v1_rdma_qos_bdf_pfc_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['bdf']:
            _path_params['bdf'] = _params['bdf']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['pfc_request'] is not None:
            _body_params = _params['pfc_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "BaseResponseBody",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/dpu_agent/v1/rdma/qos/{bdf}/pfc', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def configure_device_trust_dpu_agent_v1_rdma_qos_bdf_trush_post(self, bdf : StrictStr, trust_request : TrustRequest, **kwargs) -> BaseResponseBody:  # noqa: E501
        """Configure Device Trust  # noqa: E501

        Configure the trust mode for the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configure_device_trust_dpu_agent_v1_rdma_qos_bdf_trush_post(bdf, trust_request, async_req=True)
        >>> result = thread.get()

        :param bdf: (required)
        :type bdf: str
        :param trust_request: (required)
        :type trust_request: TrustRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BaseResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the configure_device_trust_dpu_agent_v1_rdma_qos_bdf_trush_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.configure_device_trust_dpu_agent_v1_rdma_qos_bdf_trush_post_with_http_info(bdf, trust_request, **kwargs)  # noqa: E501

    @validate_arguments
    def configure_device_trust_dpu_agent_v1_rdma_qos_bdf_trush_post_with_http_info(self, bdf : StrictStr, trust_request : TrustRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Configure Device Trust  # noqa: E501

        Configure the trust mode for the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configure_device_trust_dpu_agent_v1_rdma_qos_bdf_trush_post_with_http_info(bdf, trust_request, async_req=True)
        >>> result = thread.get()

        :param bdf: (required)
        :type bdf: str
        :param trust_request: (required)
        :type trust_request: TrustRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BaseResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'bdf',
            'trust_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configure_device_trust_dpu_agent_v1_rdma_qos_bdf_trush_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['bdf']:
            _path_params['bdf'] = _params['bdf']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['trust_request'] is not None:
            _body_params = _params['trust_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "BaseResponseBody",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/dpu_agent/v1/rdma/qos/{bdf}/trush', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def configure_force_dscp_dpu_agent_v1_rdma_qos_bdf_force_dscp_post(self, bdf : StrictStr, dscp_request : DscpRequest, **kwargs) -> BaseResponseBody:  # noqa: E501
        """Configure Force Dscp  # noqa: E501

        Configure PF force dscp .  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configure_force_dscp_dpu_agent_v1_rdma_qos_bdf_force_dscp_post(bdf, dscp_request, async_req=True)
        >>> result = thread.get()

        :param bdf: (required)
        :type bdf: str
        :param dscp_request: (required)
        :type dscp_request: DscpRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BaseResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the configure_force_dscp_dpu_agent_v1_rdma_qos_bdf_force_dscp_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.configure_force_dscp_dpu_agent_v1_rdma_qos_bdf_force_dscp_post_with_http_info(bdf, dscp_request, **kwargs)  # noqa: E501

    @validate_arguments
    def configure_force_dscp_dpu_agent_v1_rdma_qos_bdf_force_dscp_post_with_http_info(self, bdf : StrictStr, dscp_request : DscpRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Configure Force Dscp  # noqa: E501

        Configure PF force dscp .  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configure_force_dscp_dpu_agent_v1_rdma_qos_bdf_force_dscp_post_with_http_info(bdf, dscp_request, async_req=True)
        >>> result = thread.get()

        :param bdf: (required)
        :type bdf: str
        :param dscp_request: (required)
        :type dscp_request: DscpRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BaseResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'bdf',
            'dscp_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configure_force_dscp_dpu_agent_v1_rdma_qos_bdf_force_dscp_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['bdf']:
            _path_params['bdf'] = _params['bdf']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['dscp_request'] is not None:
            _body_params = _params['dscp_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "BaseResponseBody",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/dpu_agent/v1/rdma/qos/{bdf}/force_dscp', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def configure_force_pcp_dpu_agent_v1_rdma_qos_bdf_force_pcp_post(self, bdf : StrictStr, pcp_request : PcpRequest, **kwargs) -> BaseResponseBody:  # noqa: E501
        """Configure Force Pcp  # noqa: E501

        Configure PF force pcp .  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configure_force_pcp_dpu_agent_v1_rdma_qos_bdf_force_pcp_post(bdf, pcp_request, async_req=True)
        >>> result = thread.get()

        :param bdf: (required)
        :type bdf: str
        :param pcp_request: (required)
        :type pcp_request: PcpRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BaseResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the configure_force_pcp_dpu_agent_v1_rdma_qos_bdf_force_pcp_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.configure_force_pcp_dpu_agent_v1_rdma_qos_bdf_force_pcp_post_with_http_info(bdf, pcp_request, **kwargs)  # noqa: E501

    @validate_arguments
    def configure_force_pcp_dpu_agent_v1_rdma_qos_bdf_force_pcp_post_with_http_info(self, bdf : StrictStr, pcp_request : PcpRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Configure Force Pcp  # noqa: E501

        Configure PF force pcp .  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.configure_force_pcp_dpu_agent_v1_rdma_qos_bdf_force_pcp_post_with_http_info(bdf, pcp_request, async_req=True)
        >>> result = thread.get()

        :param bdf: (required)
        :type bdf: str
        :param pcp_request: (required)
        :type pcp_request: PcpRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BaseResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'bdf',
            'pcp_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configure_force_pcp_dpu_agent_v1_rdma_qos_bdf_force_pcp_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['bdf']:
            _path_params['bdf'] = _params['bdf']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['pcp_request'] is not None:
            _body_params = _params['pcp_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "BaseResponseBody",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/dpu_agent/v1/rdma/qos/{bdf}/force_pcp', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_nic_qos_dpu_agent_v1_rdma_qos_bdf_get(self, bdf : StrictStr, **kwargs) -> QosInfo:  # noqa: E501
        """Get Nic Qos  # noqa: E501

        Get the qos information for the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_nic_qos_dpu_agent_v1_rdma_qos_bdf_get(bdf, async_req=True)
        >>> result = thread.get()

        :param bdf: (required)
        :type bdf: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: QosInfo
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_nic_qos_dpu_agent_v1_rdma_qos_bdf_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_nic_qos_dpu_agent_v1_rdma_qos_bdf_get_with_http_info(bdf, **kwargs)  # noqa: E501

    @validate_arguments
    def get_nic_qos_dpu_agent_v1_rdma_qos_bdf_get_with_http_info(self, bdf : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Nic Qos  # noqa: E501

        Get the qos information for the device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_nic_qos_dpu_agent_v1_rdma_qos_bdf_get_with_http_info(bdf, async_req=True)
        >>> result = thread.get()

        :param bdf: (required)
        :type bdf: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(QosInfo, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'bdf'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nic_qos_dpu_agent_v1_rdma_qos_bdf_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['bdf']:
            _path_params['bdf'] = _params['bdf']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "QosInfo",
            '422': "HTTPValidationError",
        }

        return self.api_client.call_api(
            '/dpu_agent/v1/rdma/qos/{bdf}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_nics_info_dpu_agent_v1_rdma_list_nics_get(self, **kwargs) -> NicsInfoResponse:  # noqa: E501
        """List Nics Info  # noqa: E501

        Get the NICs information from rdma.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_nics_info_dpu_agent_v1_rdma_list_nics_get(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: NicsInfoResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_nics_info_dpu_agent_v1_rdma_list_nics_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_nics_info_dpu_agent_v1_rdma_list_nics_get_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def list_nics_info_dpu_agent_v1_rdma_list_nics_get_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """List Nics Info  # noqa: E501

        Get the NICs information from rdma.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_nics_info_dpu_agent_v1_rdma_list_nics_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(NicsInfoResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_nics_info_dpu_agent_v1_rdma_list_nics_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        _response_types_map = {
            '200': "NicsInfoResponse",
        }

        return self.api_client.call_api(
            '/dpu_agent/v1/rdma/list_nics', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
