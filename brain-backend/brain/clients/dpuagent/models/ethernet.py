# Copyright (C) 2021 - 2025, Shanghai Yunsilicon Technology Co., Ltd.

# coding: utf-8

"""
    Dpu Agent API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr, validator
from brain.clients.dpuagent.models.route import Route

class Ethernet(BaseModel):
    """
    Ethernet
    """
    name: StrictStr = Field(..., description="ethernet name")
    mac: Optional[constr(strict=True)] = None
    driver: Optional[StrictStr] = None
    dhcp4: StrictBool = Field(...)
    dhcp6: StrictBool = Field(...)
    addresses: Optional[conlist(StrictStr)] = None
    gateway4: Optional[StrictStr] = None
    gateway6: Optional[StrictStr] = None
    nameservers: Optional[conlist(StrictStr)] = None
    routes: Optional[conlist(Route)] = None
    __properties = ["name", "mac", "driver", "dhcp4", "dhcp6", "addresses", "gateway4", "gateway6", "nameservers", "routes"]

    @validator('mac')
    def mac_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$", value):
            raise ValueError(r"must validate the regular expression /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Ethernet:
        """Create an instance of Ethernet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in routes (list)
        _items = []
        if self.routes:
            for _item in self.routes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['routes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Ethernet:
        """Create an instance of Ethernet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Ethernet.parse_obj(obj)

        _obj = Ethernet.parse_obj({
            "name": obj.get("name"),
            "mac": obj.get("mac"),
            "driver": obj.get("driver"),
            "dhcp4": obj.get("dhcp4"),
            "dhcp6": obj.get("dhcp6"),
            "addresses": obj.get("addresses"),
            "gateway4": obj.get("gateway4"),
            "gateway6": obj.get("gateway6"),
            "nameservers": obj.get("nameservers"),
            "routes": [Route.from_dict(_item) for _item in obj.get("routes")] if obj.get("routes") is not None else None
        })
        return _obj


