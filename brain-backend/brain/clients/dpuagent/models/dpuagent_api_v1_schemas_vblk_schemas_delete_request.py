# Copyright (C) 2021 - 2025, Shanghai Yunsilicon Technology Co., Ltd.

# coding: utf-8

"""
    Dpu Agent API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint

class DpuagentApiV1SchemasVblkSchemasDeleteRequest(BaseModel):
    """
    DpuagentApiV1SchemasVblkSchemasDeleteRequest
    """
    rbd_path: StrictStr = Field(...)
    uuid: conint(strict=True, le=63, ge=1) = Field(...)
    gw_user: StrictStr = Field(...)
    gw_pwd: StrictStr = Field(...)
    gw_ip: StrictStr = Field(...)
    force: Optional[StrictBool] = Field(False, description="Force to continue when deleting a failed step")
    bootable: StrictBool = Field(...)
    __properties = ["rbd_path", "uuid", "gw_user", "gw_pwd", "gw_ip", "force", "bootable"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DpuagentApiV1SchemasVblkSchemasDeleteRequest:
        """Create an instance of DpuagentApiV1SchemasVblkSchemasDeleteRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DpuagentApiV1SchemasVblkSchemasDeleteRequest:
        """Create an instance of DpuagentApiV1SchemasVblkSchemasDeleteRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DpuagentApiV1SchemasVblkSchemasDeleteRequest.parse_obj(obj)

        _obj = DpuagentApiV1SchemasVblkSchemasDeleteRequest.parse_obj({
            "rbd_path": obj.get("rbd_path"),
            "uuid": obj.get("uuid"),
            "gw_user": obj.get("gw_user"),
            "gw_pwd": obj.get("gw_pwd"),
            "gw_ip": obj.get("gw_ip"),
            "force": obj.get("force") if obj.get("force") is not None else False,
            "bootable": obj.get("bootable")
        })
        return _obj


