# Copyright (C) 2021 - 2025, Shanghai Yunsilicon Technology Co., Ltd.

# coding: utf-8

"""
    Dpu Agent API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr
from brain.clients.dpuagent.models.backend_specific import BackendSpecific

class ControllerInfo(BaseModel):
    """
    ControllerInfo
    """
    ctrlr: StrictStr = Field(..., description="Name of the virtual block controller")
    cpumask: StrictStr = Field(..., description="CPU core mask assigned to the controller")
    uuid: StrictInt = Field(..., description="Unique identifier for the controller")
    vq_count: StrictInt = Field(..., description="Number of virtual queues")
    vq_size: StrictInt = Field(..., description="Size of each virtual queue")
    backend_specific: BackendSpecific = Field(...)
    __properties = ["ctrlr", "cpumask", "uuid", "vq_count", "vq_size", "backend_specific"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ControllerInfo:
        """Create an instance of ControllerInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of backend_specific
        if self.backend_specific:
            _dict['backend_specific'] = self.backend_specific.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ControllerInfo:
        """Create an instance of ControllerInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ControllerInfo.parse_obj(obj)

        _obj = ControllerInfo.parse_obj({
            "ctrlr": obj.get("ctrlr"),
            "cpumask": obj.get("cpumask"),
            "uuid": obj.get("uuid"),
            "vq_count": obj.get("vq_count"),
            "vq_size": obj.get("vq_size"),
            "backend_specific": BackendSpecific.from_dict(obj.get("backend_specific")) if obj.get("backend_specific") is not None else None
        })
        return _obj


