# Copyright (C) 2021 - 2025, Shanghai Yunsilicon Technology Co., Ltd.

# coding: utf-8

"""
    Dpu Agent API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr

class NicInfo(BaseModel):
    """
    NicInfo
    """
    bdf: StrictStr = Field(..., description="BDF of the NIC")
    ifname: StrictStr = Field(..., description="Interface name of the NIC")
    ibdev_name: StrictStr = Field(..., description="IB device name of the NIC")
    ip_addr: StrictStr = Field(..., alias="ip addr", description="IP address of the NIC")
    vendor: StrictStr = Field(..., description="Vendor of the NIC")
    mac: StrictStr = Field(..., description="MAC address of the NIC")
    __properties = ["bdf", "ifname", "ibdev_name", "ip addr", "vendor", "mac"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NicInfo:
        """Create an instance of NicInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NicInfo:
        """Create an instance of NicInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NicInfo.parse_obj(obj)

        _obj = NicInfo.parse_obj({
            "bdf": obj.get("bdf"),
            "ifname": obj.get("ifname"),
            "ibdev_name": obj.get("ibdev_name"),
            "ip_addr": obj.get("ip addr"),
            "vendor": obj.get("vendor"),
            "mac": obj.get("mac")
        })
        return _obj


