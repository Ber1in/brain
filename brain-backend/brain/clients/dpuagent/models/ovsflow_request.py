# Copyright (C) 2021 - 2025, Shanghai Yunsilicon Technology Co., Ltd.

# coding: utf-8

"""
    Dpu Agent API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conint, conlist, constr, validator

class OvsflowRequest(BaseModel):
    """
    OvsflowRequest
    """
    uuid: conint(strict=True, le=63, ge=0) = Field(...)
    vlan: conint(strict=True, le=4095, ge=1) = Field(...)
    ip: StrictStr = Field(..., description="IP/Netmask (support IPv4/IPv6)")
    gw_ip: StrictStr = Field(...)
    src_mac: constr(strict=True) = Field(...)
    dns: Optional[conlist(StrictStr)] = None
    dhcp_server: Optional[StrictStr] = None
    __properties = ["uuid", "vlan", "ip", "gw_ip", "src_mac", "dns", "dhcp_server"]

    @validator('src_mac')
    def src_mac_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$", value):
            raise ValueError(r"must validate the regular expression /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OvsflowRequest:
        """Create an instance of OvsflowRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OvsflowRequest:
        """Create an instance of OvsflowRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OvsflowRequest.parse_obj(obj)

        _obj = OvsflowRequest.parse_obj({
            "uuid": obj.get("uuid"),
            "vlan": obj.get("vlan"),
            "ip": obj.get("ip"),
            "gw_ip": obj.get("gw_ip"),
            "src_mac": obj.get("src_mac"),
            "dns": obj.get("dns"),
            "dhcp_server": obj.get("dhcp_server")
        })
        return _obj


