# Copyright (C) 2021 - 2025, Shanghai Yunsilicon Technology Co., Ltd.

# coding: utf-8

"""
    Dpu Agent API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, conint, constr, validator

class DpuagentApiV1SchemasXscnetSchemasCreateRequest(BaseModel):
    """
    DpuagentApiV1SchemasXscnetSchemasCreateRequest
    """
    uuid: Optional[conint(strict=True, le=63, ge=0)] = None
    vq_count: StrictInt = Field(..., description="vq_count must be a power of 2")
    vq_size: StrictInt = Field(..., description="vq_size must be a power of 2, recommended value is 512, max value is 1024, defaults to 512")
    mac: constr(strict=True) = Field(..., description="Optional field, MAC address")
    mtu: Optional[StrictInt] = Field(1500, description="Optional field, MTU size")
    pxe: Optional[StrictBool] = False
    __properties = ["uuid", "vq_count", "vq_size", "mac", "mtu", "pxe"]

    @validator('mac')
    def mac_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$", value):
            raise ValueError(r"must validate the regular expression /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DpuagentApiV1SchemasXscnetSchemasCreateRequest:
        """Create an instance of DpuagentApiV1SchemasXscnetSchemasCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DpuagentApiV1SchemasXscnetSchemasCreateRequest:
        """Create an instance of DpuagentApiV1SchemasXscnetSchemasCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DpuagentApiV1SchemasXscnetSchemasCreateRequest.parse_obj(obj)

        _obj = DpuagentApiV1SchemasXscnetSchemasCreateRequest.parse_obj({
            "uuid": obj.get("uuid"),
            "vq_count": obj.get("vq_count"),
            "vq_size": obj.get("vq_size"),
            "mac": obj.get("mac"),
            "mtu": obj.get("mtu") if obj.get("mtu") is not None else 1500,
            "pxe": obj.get("pxe") if obj.get("pxe") is not None else False
        })
        return _obj


